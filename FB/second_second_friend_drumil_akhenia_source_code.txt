#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
 
using namespace std;
using namespace chrono;
using namespace __gnu_pbds;
 

#define int long long int
#define ll long long
#define nline '\n'

 
#ifndef ONLINE_JUDGE
#define debug(x) cerr<< #x <<" "; _print(x); cerr<<"\n";
#else
#define debug(x)
#endif
 
#define fastio() ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)
 
// Call this function if you wish to know if my code give TLE or not
void checkTimeout() {
    double tm = (float)clock() / CLOCKS_PER_SEC;
    if (tm >= 2) {
        cerr << "Time limit exeeded" << endl;
        exit(0);
    }
}

// Operator overloads <<, >>
template<typename T1, typename T2>
istream &operator>>(istream &istream, pair<T1, T2> &p) {
    return (istream >> p.first >> p.second);
} // cin >> pair<T1, T2>
template<typename T>
istream &operator>>(istream &istream, vector<T> &v) {
    for (auto &it : v) {
        cin >> it;
    }
    return istream;
} // cin >> vector<T>
template<typename T1, typename T2>
ostream &operator<<(ostream &ostream, const pair<T1, T2> &p) {
    return (ostream << p.first << " " << p.second) << nline;
} // cout << pair<T1, T2>
template<typename T>
ostream &operator<<(ostream &ostream, const vector<T> &c) {
    for (auto &it : c) {
        cout << it << " ";
    }
    return ostream;
} // cout << vector<T>
 
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
/*---------------------------------------------------------------------------------------------------------------------------*/
// complexity of this function Log(max(a,b))

void yes() {
    cout << "YES\n";
}
void no() {
    cout << "NO\n";
}

 

/*--------------------------------------------------------------------------------------------------------------------------*/


void pcase(int i,string &val){
    cout<<"Case #"<<i<<": "<<val<<"\n";
}
int row,col;
vector< int > dr = {0,0,-1,1};
vector< int > dc = {-1,1,0,0};
bool isValid(int r,int c){
    return (r>=0 && c>=0 && r<row && c<col);
}
void solve(int i){
    
    cin>>row>>col;
    vector<string>matrix(row);
    cin>>matrix;
    string pos = "Possible",ipos = "Impossible";

    if( 1==row || 1==col ){
        int ans = 0;
        for(auto &val : matrix){
            for(auto v : val)   ans += '^'==v;
        }
        if( 0==ans ){
            pcase(i,pos);
            for(auto &val : matrix) cout<<val<<"\n";
        }else{
            pcase(i,ipos);
        }
    }else{
        vector< pair<int,int> > vect;
        for(int i=0 ; i<matrix.size() ; i++){
            for(int j=0 ; j<matrix[0].size() ; j++){
                if( '^'==matrix[i][j] )    vect.push_back({i,j});
                else if( '.'==matrix[i][j] )   matrix[i][j] = '^';
            }
        }
        vector< vector<bool> > visited(row,vector<bool>(col,false));
        queue< pair<int,int> > q;
        for(int i=0 ; i<matrix.size() ; i++){
            for(int j=0 ; j<matrix[i].size() ; j++){
                if( '^'==matrix[i][j] ){
                    int ans = 0;
                    for(int k=0 ; k<4 ; k++){
                        int nr = i+dr[k];
                        int nc = j+dc[k];
                        if( isValid(nr,nc) ){
                            ans += '^'==matrix[nr][nc];
                        }
                    }
                    if( ans<2 ){
                        q.push({i,j});
                    }
                }
            }
        }
        while( !q.empty() ){
            int ans = 0;
            int r = q.front().first;
            int c = q.front().second;q.pop();
            if( '.'==matrix[r][c] )    continue;
            for(int i=0 ; i<4 ; i++){
                int nr = r+dr[i];
                int nc = c+dc[i];
                if( isValid(nr,nc) ){
                    ans += '^'==matrix[nr][nc];
                }
            }
            if( ans<2 ){
                matrix[r][c] = '.';
                for(int i=0 ; i<4; i++){
                    int nr = r+dr[i];
                    int nc = c+dc[i];
                    if( isValid(nr,nc) && '^'==matrix[nr][nc] )
                        q.push({nr,nc});
                }
            }
        }
        for(auto &val : vect){
            if( '^'!=matrix[val.first][val.second] ){
                pcase(i,ipos);return;
            }
        }
        pcase(i,pos);
        for(auto &val : matrix){
            cout<<val<<"\n";
        }
    }
}

signed main() {
    fastio();
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("outpt.txt", "w", stdout);
    freopen("Error.txt", "w", stderr);
#endif
    ll test;
    test = 1;
    cin >> test;
    int i=1;
    while (test--) {
        solve(i++);
        checkTimeout();
    }
    cerr << "time taken : " << (float)clock() / CLOCKS_PER_SEC << " secs" << endl;
    return 0;
}
 
// use unordered_map only when no. of unique values in ump is less than 10^4 OR you have enough time to do rehashing
 
// don't try to be fast during contest try to be accurate and observe all the corner cases
 
// toggle ctrl+shift+z